
#Simplied grammar inspired from the Bash syntax and my previous attempt at a command line interface


<complete_command> ::= <list> <sequence_operator> | <list> 
<list> ::= <and_or> <sequence_operator> <list> | <and_or>
<and_or> ::= <pipe_sequence> | <pipe_sequence> <and_or> | <pipe_sequence> '&&' <pipe_sequence> | <pipe_sequence> '||' <pipe_sequence>
#RULE 2: A pipe can only exist if both AND and OR aren't included in the sequence.
<pipe_sequence> ::= <command> | <command> '|' <pipe_sequence>

<command> ::= <simple_command>

#RULE 1: First term is always a reserved or alias command
<simple_command> ::= <COMMAND> <wordlist> <suffix> | <COMMAND> <wordlist> | <COMMAND> <suffix> | <COMMAND>
#RULE 3: If only one WORD in wordlist and WORD matches a command it is wrapped with quotes.
<wordlist> ::= <WORD> <wordlist> | <WORD>
<suffix> ::= '-' <CHAR> <suffix> | '--' <WORD> <suffix> | <redirect>

<sequence_operator> ::= '&' | ';'

<redirect> ::= '>' <FILE> | '<' <FILE> | '>>' <FILE> | '<>' <FILE>

<COMMAND> ::= <BUILTIN_COMMAND> | <ALIAS_COMMAND> | <SHORTCUT>

<WORD> ::= /*string sequence*/ | <REGEX_WORD>
#RULE 4: REGEX_WORD can not contain space and must be in a form accepted by the Rust compiler. 
<REGEX_WORD> ::= /*string sequence that contains regex*/