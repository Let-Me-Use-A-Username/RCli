Current:
    RCLi:
        -ls command
            -change hidden to -a
            -Implement ls -v -verbose
                -Flag to show types additional information
                    -User permissions, data created, data modified
            -Implement ls -l (literal?)
                -Dereferences symlinks
            -Implement -p (pattern) ??? dont know
            

        -Implement redirect
            -Probably by using touch

        -Implement locking(mutex?).
            -Lock files during usage
        
        -implement conccurency (threads)
            -Teminal will hold the TUI (most likely)
            -Parsing operations will be threaded(???)
        
        -Write extensive tests for all modules


    parser:
        -Implement more generic grep
        -Make sure parser is 100% good to go before implementing UI
    
        

Project Consideration and Ideas:

    -I/O in C:
        -Due to Rust not having implemented Window calls to a low (enough) degree, consider 
        changing function calls that perform I/O operation to C code and import it in Rust.
            -This I believe will provide greater handling that using Rust (for the moment at least)

    -OS and other Signals:
        -Read on signals https://blog.logrocket.com/guide-signal-handling-rust/
        -Handle signals from OS (CTRL^C for example)

    -Asynchronous command calls:
        -In unix when providing & the command runs asynchronously, this could be achieved by 
        creating a thread that runs the operation


invoker:
    -Implement help
        -Shows available commands and invocation
    -Implement shortcut 
        -Adds an alias for a executable (probably) and saves it in a retrievable document


terminal:
    https://docs.rs/crossterm/latest/crossterm/index.html#
    -Basic TUI
    -Note:Accept raw input with Crossterm which is included in ratatui?
        -I.E. newline, CTRL^C etc
        -Handle with lexer or parser?


STUDY:
    Macros cheat sheet: https://cheats.rs/#macros-attributes
    Writting macros: https://dhghomon.github.io/easy_rust/Chapter_61.html

    Rust general:
        -Generics, Traits, Lifetimes, Closures, SmartPointers, Iterators, Advanced Rust

    Unix terminal:
        GNU Manual: 
            https://www.gnu.org/software/coreutils/manual/coreutils.html
        Terminal: 
            http://www.linusakesson.net/programming/tty/