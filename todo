CurrentProblem:
    invoker:
        -Todo:Parse flags before invocation(?)
        -Todo:Refactor after invoker is at an acceptable state

STUDY: 
    -https://cheats.rs/#macros-attributes
    -Rust general
    
    http://www.linusakesson.net/programming/tty/
    https://mally.stanford.edu/~sr/computing/basic-unix.html
    https://swcarpentry.github.io/shell-novice/reference.html
    -Note:Read how Unix shell and commands work in order to mimick the functionality


Project:
    https://dhghomon.github.io/easy_rust/Chapter_61.html
    -Todo:Logger to log output
        -parser operations
        -terminal operations


RCLi:
    -Todo:Change big if statemets to patterns or do something better
    -Todo:Handle errors better in general
    -Todo:Reformat when the parser works to a certain acceptable degree



parser:
    -Note:consider whether matching commands is better than tree implementation
        -This will most likely need 
            1)a new command_grammar than contains core invocations
            2)a tree that contains a form of struct with a function as a parameter
            3)invocation will change from match to tree parsing


terminal:
    -Note:Every terminal instance should be a singlenton.
        -Therefore when a new terminal is started it is assigned a new singlenton.
    
    https://docs.rs/crossterm/latest/crossterm/index.html#
    -Note:Accept raw input with Crossterm which is included in ratatui?
        -I.E. newline, CTRL^C etc
        -Handle with lexer or parser?