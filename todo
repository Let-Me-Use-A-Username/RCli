Current:
    RCLi:
        -Implement basic synchronous logger
            -Check chatgpt solution
            -Later on this has to be implemented by using std::sync::mpsc
                -Should logger be part of the singlenton.. ?

        -Implement locking(mutex?).
            -Lock stdout when writting from Terminal
                -Logger
            -Lock files during usage
        
        -implement conccurency (threads) 
            -This can be achieved in 2 different ways
                -1. Invoking operation (parsing) run on different threads (not ideal since terminal is generaly synchronous)
                -2. Running instances of rcli terminals is a different thread(not sure how this will be implemented since it can be 
                argued that each instance is a process...?)
            
            -NewIdea:When a new terminal instance is created, essencially a new TUI is created, however the parser is effectively still 
            a single instance.
            This means that a father operations spawns terminal TUIs but the parser and logger are always a single instance.
                This means that concurrency could be 2 things.
                    When a terminal instance accepts the input and calls the parser it spawns a new thread
                    When the parser or terminal wants to output to stdout this action is performed by the logger whom also spawns a new thread
                        This means that the logger might have to be asynchronous


    lexer/parser:
        -Implement more generic grep
        -Todo:Rewrite tests
    
        

STUDY:
    Rust general:
        -Generics, Traits, Lifetimes, Closures, SmartPointers, Iterators, Advanced Rust
    
    Unix terminal:
        GNU Manual: 
            https://www.gnu.org/software/coreutils/manual/coreutils.html
        Terminal: 
            http://www.linusakesson.net/programming/tty/


Project:
    -Asynchronous:
        -In unix when providing & the command runs asynchronously, this could be achieved by 
        creating a thread that runs the operation
    
    -Note: When trying to cd in D:(Daddy) it instnaly goes to RCli project folder


invoker:
    -Implement cp ./ -d ../ --clean
        -Flag --clean Removes original files
        -We have move tho..?
    -Implement ls -a
        -Flag to show types permissions and date 
    -Implement help
        -Shows available commands and invocation
    -Implement find
        -Searching dataset to match a string loosely
    -Implement shortcut 
        -Adds an alias for a executable (probably) and saves it in a retrievable document
    -Implement enable
        -Enables debug logging from logger (reader, lexer, parser, invoker)
            -Terminal will use stdout


terminal:
    https://docs.rs/crossterm/latest/crossterm/index.html#
    -Basic TUI
    -Note:Accept raw input with Crossterm which is included in ratatui?
        -I.E. newline, CTRL^C etc
        -Handle with lexer or parser?