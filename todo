CurrentProblem:
    lexical:Problem, when a relative path is given, like cd RCli, the lexer doesnt find it as neither a 
    dir or a file.
        -New object regex works.
        -Consider the following. Instead of matching files or directories. Match objects. If an object is found pass 
        it to the parser and then invoker translate it to file or dir depending on the command. 
        For example touch can only use files while mkdir only directories etc.


    https://docs.rs/crossterm/latest/crossterm/index.html#
    -Note:Accept raw input with Crossterm which is included in ratatui?
        -I.E. newline, CTRL^C etc


    http://www.linusakesson.net/programming/tty/
    https://mally.stanford.edu/~sr/computing/basic-unix.html
    https://swcarpentry.github.io/shell-novice/reference.html
    -Note:Read how Unix shell and commands work in order to mimick the functionality
    
    -Todo:singlenton:why .. doesnt work but ../ doesnt

    https://doc.rust-lang.org/std/path/struct.Components.html
    https://doc.rust-lang.org/std/path/struct.Path.html#method.components
    -Todo:Dotparser:Iterate over the components and depending on what
    a component is handle it accordingly

Project:
    -Todo:Logger to log output
        -parser operations
        -terminal operations

RCLi:
    -Todo:Change big if statemets to patterns or do something better
    -Todo:Handle errors better in general
        -Example:change the unwraping of UserInput
    -Todo:Reformat when the parser works to a certain acceptable degree
    -Todo:Add shorthand invocation. list -> ls


lexical:


parser:
    -Note:consider whether matching commands is better than tree implementation
        -Depends on how easy it is to interpret the token stream


terminal:
    -Note:Every terminal instance should be a singlenton.
        -Therefore when a new terminal is started it is assigned a new singlenton.
    -Todo:change user interface to ratatui